"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Highlight = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _prismjs = _interopRequireDefault(require("prismjs"));

var _styles = require("./shared/styles");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  /*\n    Line below from: prismjs/themes/prism.css, with removal of overly specific\n    selectors (primarily [class*=language-]) and selectors that collide with our\n    global styling (primarly code & pre selectors).\n  */\n  .token.cdata,.token.comment,.token.doctype,.token.prolog{color:#708090}.token.punctuation{color:#999}.namespace{opacity:.7}.token.boolean,.token.constant,.token.deleted,.token.number,.token.property,.token.symbol,.token.tag{color:#905}.token.attr-name,.token.builtin,.token.char,.token.inserted,.token.selector,.token.string{color:#690}.language-css .token.string,.style .token.string,.token.entity,.token.operator,.token.url{color:#a67f59;background:hsla(0,0%,100%,.5)}.token.atrule,.token.attr-value,.token.keyword{color:#07a}.token.class-name,.token.function{color:#dd4a68}.token.important,.token.regex,.token.variable{color:#e90}.token.bold,.token.important{font-weight:700}.token.italic{font-style:italic}.token.entity{cursor:help}\n\n  code, pre {\n    color: ", ";\n  }\n\n  code {\n    white-space: pre;\n  }\n\n  pre {\n    padding: 11px 1rem;\n    margin: 1rem 0;\n    background: ", ";\n    overflow: auto;\n  }\n\n  .language-bash .token.operator,\n  .language-bash .token.function,\n  .language-bash .token.builtin {\n    color: ", ";\n    background: none;\n  }\n\n  .language-markdown .token.title,\n  .language-md .token.title {\n    color: #dd4a68;\n  }\n\n  .language-markdown .token.table-header,\n  .language-md .token.table-header {\n    color: #07a;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

if (typeof document !== 'undefined') {
  // @ts-ignore
  global.Prism = _prismjs["default"];

  require('prismjs/components/prism-bash');

  require('prismjs/components/prism-javascript');

  require('prismjs/components/prism-typescript');

  require('prismjs/components/prism-json');

  require('prismjs/components/prism-css');

  require('prismjs/components/prism-yaml');

  require('prismjs/components/prism-markdown');

  require('prismjs/components/prism-jsx');

  require('prismjs/components/prism-tsx');
} // Prism theme copied from 'prismjs/themes/prism.css.' -- without Webpack, the CSS
// cannot be imported easily and any app which pulls in the design system will
// need to handle the CSS loading itself. Therefore, it is easiest to just copy
// the theme over.
// prettier-ignore


var HighlightBlock = _styledComponents["default"].div(_templateObject(), _styles.color.darkest, _styles.color.lighter, _styles.color.darkest);

var languageMap = {
  mdx: 'markdown',
  bash: 'bash',
  javascript: 'javascript',
  typescript: 'typescript',
  json: 'json',
  css: 'css',
  yaml: 'yaml',
  markdown: 'markdown',
  md: 'md',
  jsx: 'jsx',
  tsx: 'tsx'
};

var Highlight = function Highlight(_ref) {
  var children = _ref.children,
      inputLanguage = _ref.language,
      _ref$withHTMLChildren = _ref.withHTMLChildren,
      withHTMLChildren = _ref$withHTMLChildren === void 0 ? true : _ref$withHTMLChildren,
      rest = (0, _objectWithoutProperties2["default"])(_ref, ["children", "language", "withHTMLChildren"]);
  var language = languageMap[inputLanguage] || inputLanguage;
  var codeBlock = withHTMLChildren ? /*#__PURE__*/_react["default"].createElement("div", {
    dangerouslySetInnerHTML: {
      __html: children
    }
  }) : children;
  var domNode = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    if (domNode.current) {
      _prismjs["default"].highlightAllUnder(domNode.current);
    }
  });
  return /*#__PURE__*/_react["default"].createElement(HighlightBlock, (0, _extends2["default"])({}, rest, {
    ref: domNode
  }), language ? /*#__PURE__*/_react["default"].createElement("pre", {
    className: "language-".concat(language)
  }, /*#__PURE__*/_react["default"].createElement("code", {
    className: "language-".concat(language)
  }, codeBlock)) : codeBlock);
};

exports.Highlight = Highlight;